/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
FilterGuiAudioProcessor::FilterGuiAudioProcessor() //: filter1(new VAOnePoleFilter())
{
    // VINNIE'S DSP
    f1 = new Dsp::SmoothedFilterDesign <Dsp::Butterworth::Design::LowPass<4>, 2> (1024);    // Max Filter Order 4
    f2 = new Dsp::SmoothedFilterDesign <Dsp::Butterworth::Design::HighPass<4>, 2> (1024);   // Max Filter Order 4
    
    addParameter(gainParam = new AudioParameterFloat("gain", "Gain", 0.0f, 1.0f, 1.0f));   // Gain = 1.0f
    addParameter(freqParam = new AudioParameterFloat("freq", "Frequency", 20.0f, 20000.0f, 5000.0f));   // Gain = 1.0f
    addParameter(filtOrder = new AudioParameterInt("filt", "Filter Order", 1, 4, 1));
}

FilterGuiAudioProcessor::~FilterGuiAudioProcessor()
{
}


//==============================================================================
const String FilterGuiAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool FilterGuiAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool FilterGuiAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool FilterGuiAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double FilterGuiAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int FilterGuiAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int FilterGuiAudioProcessor::getCurrentProgram()
{
    return 0;
}

void FilterGuiAudioProcessor::setCurrentProgram (int index)
{
}

const String FilterGuiAudioProcessor::getProgramName (int index)
{
    return String();
}

void FilterGuiAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void FilterGuiAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // For smooth Gain control
    previousGain = *gainParam;
    
    // VINNIE'S DSP
    params1[0] = sampleRate; // sample rate
    // VINNIE'S DSP
}

void FilterGuiAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void FilterGuiAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getTotalNumInputChannels(); i < getTotalNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());
    
   

    // BEGIN PROCESSING THE BUFFERS
    //=========================================================================================
    //params1[1] = 2;       // filter order
    //params1[2] = 1000;    // cutoff freq
    
    params1[1] = *filtOrder;       // filter order
    params1[2] = *freqParam;    // cutoff freq
    f1->setParams (params1);
    f2->setParams (params1);
    
    
    // Check that there are at least two channels before we process our 2 channel filter
    jassert (getTotalNumInputChannels() >= 2);
    const float currentGain = *gainParam;

    
    // Notice that buffer provides us a nice way to get the array of audio data
    switch(this->filtType)
    {
        case 0:
            // Lowpass
            f1->process (buffer.getNumSamples(), buffer.getArrayOfWritePointers());
            if (currentGain == previousGain)
            {
                buffer.applyGain (currentGain);
            }
            else
            {
                buffer.applyGainRamp (0, buffer.getNumSamples(), previousGain, currentGain);
                previousGain = currentGain;
            }
            break;
        case 1:
            // Highpass
            f2->process (buffer.getNumSamples(), buffer.getArrayOfWritePointers());
            //const float currentGain = *gainParam;
            if (currentGain == previousGain)
            {
                buffer.applyGain (currentGain);
            }
            else
            {
                buffer.applyGainRamp (0, buffer.getNumSamples(), previousGain, currentGain);
                previousGain = currentGain;
            }
            break;
        default:
            if (currentGain == previousGain)
            {
                buffer.applyGain (currentGain);
            }
            else
            {
                buffer.applyGainRamp (0, buffer.getNumSamples(), previousGain, currentGain);
                previousGain = currentGain;
            }
            break;
            
    }
    
    
    //=========================================================================================
    // END PROCESSING THE BUFFERS
}

void FilterGuiAudioProcessor::setFiltType(int value)
{
    this->filtType=value;
}

//==============================================================================
bool FilterGuiAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* FilterGuiAudioProcessor::createEditor()
{
    return new FilterGuiAudioProcessorEditor (*this);
}
 

//==============================================================================
void FilterGuiAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
    
    // Create an outer XML element..
    XmlElement xml ("MYPLUGINSETTINGS");
    
    // Store the values of all our parameters, using their param ID as the XML attribute
    for (int i = 0; i < getNumParameters(); ++i)
        if (AudioProcessorParameterWithID* p = dynamic_cast<AudioProcessorParameterWithID*> (getParameters().getUnchecked(i)))
            xml.setAttribute (p->paramID, p->getValue());
    
    // then use this helper function to stuff it into the binary blob and return it..
    copyXmlToBinary (xml, destData);
}

void FilterGuiAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
    // This getXmlFromBinary() helper function retrieves our XML from the binary blob..
    ScopedPointer<XmlElement> xmlState (getXmlFromBinary (data, sizeInBytes));
    
    if (xmlState != nullptr)
    {
        // make sure that it's actually our type of XML object..
        if (xmlState->hasTagName ("MYPLUGINSETTINGS"))
        {
            // Now reload our parameters..
            for (int i = 0; i < getNumParameters(); ++i)
                if (AudioProcessorParameterWithID* p = dynamic_cast<AudioProcessorParameterWithID*> (getParameters().getUnchecked(i)))
                    p->setValueNotifyingHost ((float) xmlState->getDoubleAttribute (p->paramID, p->getValue()));
        }
    }
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new FilterGuiAudioProcessor();
}
