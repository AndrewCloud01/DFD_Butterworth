/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "DspFilters/Dsp.h"


//==============================================================================
/**
*/
class FilterGuiAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    FilterGuiAudioProcessor();
    ~FilterGuiAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;
    
    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    

    // these are used to persist the UI's size - the values are stored along with the
    // filter's other parameters, and the UI component will update them when it gets
    // resized.
    int lastUIWidth, lastUIHeight;
    AudioParameterFloat* gainParam = nullptr;
    AudioParameterFloat* freqParam = nullptr;
    AudioParameterInt* filtOrder = nullptr;
    
    void setFiltType (int value);

    
private:
    //==============================================================================
    float previousGain;
    int filtType;
    
    // VINNIE'S DSP
    ScopedPointer<Dsp::Filter> f1, f2;
    Dsp::Params params1;
    // VINNIE'S DSP
    
    //Default setup values for filter etc.
    const float defaultSampleRate = 44100.00;
    const float defaultMinFilterFrequency = 20.00;
    const float defaultMaxFilterFrequency = 20000.00;
    
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (FilterGuiAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
