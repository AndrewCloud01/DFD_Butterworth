/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include <iostream>
using namespace std;

class FilterGuiAudioProcessorEditor::ParameterSlider : public Slider
{
public:
    ParameterSlider(AudioProcessorParameter& p)
    : Slider(p.getName(256)), param(p)
    {
        setRange(0.0, 1.0, 0.0);
        updateSliderPos();
    }
    
    void valueChanged() override
    {
        if (isMouseButtonDown())
            param.setValueNotifyingHost((float)Slider::getValue());
        else
            param.setValue((float)Slider::getValue());
    }
    
    void startedDragging() override { param.beginChangeGesture(); }
    void stoppedDragging() override { param.endChangeGesture(); }
    
    double getValueFromText(const String& text) override { return param.getValueForText(text); }
    String getTextFromValue(double value) override { return param.getText((float)value, 1024); }
    
    void updateSliderPos()
    {
        const float newValue = param.getValue();
        
        if (newValue != (float)Slider::getValue() && !isMouseButtonDown())
            Slider::setValue(newValue);
    }
    
    AudioProcessorParameter& param;
    
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(ParameterSlider)
};

//==============================================================================
FilterGuiAudioProcessorEditor::FilterGuiAudioProcessorEditor (FilterGuiAudioProcessor& p)
    : AudioProcessorEditor (&p),
    processor (p),
    gainLabel(String(), "Gain:"),
    frequencyCutoffLabel(String(), "Frequency Cutoff:"),
    filterOrderLabel(String(), "Filter Order:")
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (600, 500);
    
    setLookAndFeel(&customLookAndFeel);
    
    // SLIDERS
    // Cutoff Frequency Slider
    addAndMakeVisible(frequencyCutoff = new ParameterSlider(*processor.freqParam));
    frequencyCutoff->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 15);
    frequencyCutoff->setTextValueSuffix(" Hz");
    frequencyCutoff->setSliderStyle(Slider::Rotary);
    frequencyCutoff->setBounds(150, 75, 100, 100);
    frequencyCutoff->setSkewFactor(0.5);
    frequencyCutoffLabel.attachToComponent(frequencyCutoff, false);
    frequencyCutoffLabel.setFont(Font(11.0f));
    
    // Gain Slider
    addAndMakeVisible(gainSlider = new ParameterSlider(*processor.gainParam));
    gainSlider->setSliderStyle(Slider::Rotary);
    gainSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 15);
    gainSlider->setTextValueSuffix(" dB");
    gainSlider->setBounds(280, 75, 100, 100);
    gainLabel.attachToComponent(gainSlider, false);
    gainLabel.setFont(Font(11.0f));
    
    // Filter Order Slider
    addAndMakeVisible(filtOrderSlider = new ParameterSlider(*processor.filtOrder));
    filtOrderSlider->setSliderStyle(Slider::Rotary);
    filtOrderSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 15);
    filtOrderSlider->setBounds(20, 75, 100, 100);
    filterOrderLabel.attachToComponent(filtOrderSlider, false);
    filterOrderLabel.setFont(Font(11.0f));
    
    // COMBO BOX
    // Controls Filter Type
    addAndMakeVisible(filterTypeDropDown);
    filterTypeDropDown.addItem("LowPass", 1);
    filterTypeDropDown.addItem("HighPass", 2);
    filterLabel.setText("Choose Filter", dontSendNotification);
    filterLabel.attachToComponent(&filterTypeDropDown, true);
    filterTypeDropDown.setColour(ComboBox::outlineColourId, Colours::white);
    filterTypeDropDown.setColour(ComboBox::backgroundColourId, Colours::black);
    filterTypeDropDown.setColour(ComboBox::textColourId, Colours::white);
    filterTypeDropDown.setColour(ComboBox::buttonColourId, Colours::white);
    filterTypeDropDown.setSelectedId(1);
    filterTypeDropDown.addListener(this);
}

FilterGuiAudioProcessorEditor::~FilterGuiAudioProcessorEditor()
{
    filterTypeDropDown.removeListener(this);
}


//==============================================================================
void FilterGuiAudioProcessorEditor::comboBoxChanged(ComboBox* comboBoxThatChanged)
{
    
    //In here set filter type and also update filter response display's filter type
    if (comboBoxThatChanged == &filterTypeDropDown)
    {
        processor.setFiltType(filterTypeDropDown.getSelectedItemIndex());
    }
    
}
//==============================================================================
void FilterGuiAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::black);
}

void FilterGuiAudioProcessorEditor::resized()
{
    Rectangle<int> r(getLocalBounds());
   
    r.removeFromTop(20);
    Rectangle<int> filterArea(r.removeFromTop(40));
    filterTypeDropDown.setBounds(100, 10, 150, 40);
    
}
